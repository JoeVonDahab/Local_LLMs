#!/usr/bin/env python3
import glob
import pandas as pd
import re

def parse_sdf_scores(filename):
    """Parse scores from an SDF file generated by gnina"""
    scores = {}
    try:
        with open(filename, 'r') as f:
            content = f.read()
            
        # Look for score lines in SDF format
        # Example lines:
        # >  <minimizedAffinity>
        # -7.123
        # 
        # >  <CNNscore>
        # 0.456
        
        patterns = {
            'Affinity': r'>  <(?:minimized)?[Aa]ffinity>\s*\n([-+]?\d*\.?\d+)',
            'CNNscore': r'>  <CNNscore>\s*\n([-+]?\d*\.?\d+)',
            'CNNaffinity': r'>  <CNNaffinity>\s*\n([-+]?\d*\.?\d+)',
            'CNNvariance': r'>  <CNNvariance>\s*\n([-+]?\d*\.?\d+)'
        }
        
        for score_name, pattern in patterns.items():
            match = re.search(pattern, content)
            if match:
                scores[score_name] = float(match.group(1))
            else:
                scores[score_name] = None
                
    except Exception as e:
        raise Exception(f"Error parsing {filename}: {e}")
    
    return scores

rows = []
skipped = []

for fn in glob.glob("scored/*_scored.sdf"):
    base = fn.split("/")[-1].replace("_scored.sdf","")
    try:
        scores = parse_sdf_scores(fn)
        data = {"ligand": base}
        data.update(scores)
        rows.append(data)
    except Exception as e:
        skipped.append((base, str(e)))
        continue

# Report skipped files
if skipped:
    print(f"⚠️  Skipped {len(skipped)} files due to parse errors:")
    for name, err in skipped:
        print(f"  - {name}: {err}")

# Build and write the CSV
df = pd.DataFrame(rows)
df = df[["ligand", "Affinity", "CNNscore", "CNNaffinity", "CNNvariance"]]
# Sort by Affinity (more negative = better binding)
df = df.sort_values("Affinity", ascending=True).reset_index(drop=True)
df.to_csv("gnina_scores.csv", index=False)
print(f"✅  Wrote {len(df)} scored ligands to gnina_scores.csv")
